Общая структура запроса выглядит следующим образом:

SELECT ('столбцы или * для выбора всех столбцов; обязательно')
FROM ('таблица; обязательно')
WHERE ('условие/фильтрация, например, city = 'Moscow'; необязательно')
GROUP BY ('столбец, по которому хотим сгруппировать данные; необязательно')
HAVING ('условие/фильтрация на уровне сгруппированных данных; необязательно')
ORDER BY ('столбец, по которому хотим отсортировать вывод; необязательно')

Разберем структуру. Для удобства текущий изучаемый элемент в запроса выделяется CAPS'ом.

SELECT, FROM

SELECT, FROM — обязательные элементы запроса, которые определяют выбранные столбцы, их порядок и источник данных.

Выбрать все (обозначается как *) из таблицы Customers:

SELECT * FROM Customers

Выбрать столбцы CustomerID, CustomerName из таблицы Customers:

SELECT CustomerID, CustomerName FROM Customers


WHERE

WHERE — необязательный элемент запроса, который используется, когда нужно отфильтровать данные по нужному условию. Очень часто внутри элемента where используются IN / NOT IN для фильтрации столбца по нескольким значениям, AND / OR для фильтрации таблицы по нескольким столбцам.

Фильтрация по одному условию и одному значению:

select * from Customers
WHERE City = 'London'

Фильтрация по одному условию и нескольким значениям с применением IN (включение) или NOT IN (исключение):

select * from Customers
where City IN ('London', 'Berlin')

select * from Customers
where City NOT IN ('Madrid', 'Berlin','Bern')

Фильтрация по нескольким условиям с применением AND (выполняются все условия) или OR (выполняется хотя бы одно условие) и нескольким значениям:

select * from Customers
where Country = 'Germany' AND City not in ('Berlin', 'Aachen') AND CustomerID > 15

select * from Customers
where City in ('London', 'Berlin') OR CustomerID > 4

GROUP BY

GROUP BY — необязательный элемент запроса, с помощью которого можно задать агрегацию по нужному столбцу (например, если нужно узнать какое количество клиентов живет в каждом из городов).

При использовании GROUP BY обязательно:

перечень столбцов, по которым делается разрез, был одинаковым внутри SELECT и внутри GROUP BY,
агрегатные функции (SUM, AVG, COUNT, MAX, MIN) должны быть также указаны внутри SELECT с указанием столбца, к которому такая функция применяется.

Группировка количества клиентов по городу:

select City, count(CustomerID) from Customers
GROUP BY City

Группировка количества клиентов по стране и городу:

select Country, City, count(CustomerID) from Customers
GROUP BY Country, City

Группировка продаж по ID товара с разными агрегатными функциями: количество заказов с данным товаром и количество проданных штук товара:


select ProductID, COUNT(OrderID), SUM(Quantity) from OrderDetails
GROUP BY ProductID

Группировка продаж с фильтрацией исходной таблицы. В данном случае на выходе будет таблица с количеством клиентов по городам Германии:


select City, count(CustomerID) from Customers
WHERE Country = 'Germany'
GROUP BY City

Переименование столбца с агрегацией с помощью оператора AS. По умолчанию название столбца с агрегацией равно примененной агрегатной функции, что далее может быть не очень удобно для восприятия.

select City, count(CustomerID) AS Number_of_clients from Customers
group by City

HAVING

HAVING — необязательный элемент запроса, который отвечает за фильтрацию на уровне сгруппированных данных (по сути, WHERE, но только на уровень выше).

Фильтрация агрегированной таблицы с количеством клиентов по городам, в данном случае оставляем в выгрузке только те города, в которых не менее 5 клиентов:


select City, count(CustomerID) from Customers
group by City
HAVING count(CustomerID) >= 5 


В случае с переименованным столбцом внутри HAVING можно указать как и саму агрегирующую конструкцию count(CustomerID), так и новое название столбца number_of_clients:


select City, count(CustomerID) as number_of_clients from Customers
group by City
HAVING number_of_clients >= 5

Пример запроса, содержащего WHERE и HAVING. В данном запросе сначала фильтруется исходная таблица по пользователям, рассчитывается количество клиентов по городам и остаются только те города, где количество клиентов не менее 5:


select City, count(CustomerID) as number_of_clients from Customers
WHERE CustomerName not in ('Around the Horn','Drachenblut Delikatessend')
group by City
HAVING number_of_clients >= 5

ORDER BY

ORDER BY — необязательный элемент запроса, который отвечает за сортировку таблицы.

Простой пример сортировки по одному столбцу. В данном запросе осуществляется сортировка по городу, который указал клиент:


select * from Customers
ORDER BY City

Осуществлять сортировку можно и по нескольким столбцам, в этом случае сортировка происходит по порядку указанных столбцов:


select * from Customers
ORDER BY Country, City

По умолчанию сортировка происходит по возрастанию для чисел и в алфавитном порядке для текстовых значений. Если нужна обратная сортировка, то в конструкции ORDER BY после названия столбца надо добавить DESC:


select * from Customers
order by CustomerID DESC

Обратная сортировка по одному столбцу и сортировка по умолчанию по второму:

select * from Customers
order by Country DESC, City

JOIN

JOIN — необязательный элемент, используется для объединения таблиц по ключу, который присутствует в обеих таблицах. Перед ключом ставится оператор ON.

Запрос, в котором соединяем таблицы Order и Customer по ключу CustomerID, при этом перед названиям столбца ключа добавляется название таблицы через точку:

select * from Orders
JOIN Customers ON Orders.CustomerID = Customers.CustomerID

Нередко может возникать ситуация, когда надо промэппить одну таблицу значениями из другой. В зависимости от задачи, могут использоваться разные типы присоединений. INNER JOIN — пересечение, RIGHT/LEFT JOIN для мэппинга одной таблицы знаениями из другой,


select * from Orders
join Customers on Orders.CustomerID = Customers.CustomerID
where Customers.CustomerID >10

Внутри всего запроса JOIN встраивается после элемента from до элемента where, пример запроса:

Другие типы JOIN'ов можно увидеть на замечательной картинке ниже:


В следующей части подробнее поговорим о типах JOIN'ов и вложенных запросах.
SELECT USER_ID
COUNT (*)
FROM orders 
GROUP BY 1
ORDER BY 2 DESC 
LIMIT 5

SELECT 
USER_ID
COUNT *
FROM 
Orders 
GROUP BY USER_ID
ORDER BY COUNT (*)
DESC 
LIMIT 5;

SELECT invoice_id
FROM invoice_line
GROUP BY invoice_id
HAVING COUNT(*) > 5;

SELECT AVG(unit_price)
FROM invoice_line AS avg_price

SELECT 
    billing_country,
    MIN(total) AS min_total,
    MAX(total) AS max_total,
    AVG(total) AS avg_total
FROM 
    invoice
WHERE 
    invoice_id IN (
        SELECT 
            invoice_id
        FROM 
            invoice_line
        GROUP BY 
            invoice_id
        HAVING 
            COUNT(track_id) > 5 AND total > (
                SELECT 
                    AVG(unit_price)
                FROM 
                    track
            )
    )
GROUP BY 
    billing_country
ORDER BY 
    avg_total DESC,
    billing_country ASC;

SELECT name
FROM genre
WHERE genre_id IN (SELECT genre_id
FROM track
GROUP BY genre_id
ORDER BY MIN(milliseconds) ASC
LIMIT 2);

SELECT billing_city
FROM invoice
WHERE total > (
    SELECT MAX(total)
    FROM invoice
    WHERE EXTRACT(YEAR FROM CAST(invoice_date AS date)) = '2009'
)
GROUP BY billing_city;

SELECT c.name, AVG(m.length)
FROM movie AS m
LEFT OUTER JOIN film_category AS fc ON m.film_id=fc.film_id
LEFT OUTER JOIN category AS c ON fc.category_id=c.category_id
WHERE m.rating IN (SELECT rating
FROM movie 
GROUP BY rating
ORDER BY AVG(rental_rate) DESC
LIMIT 1)
GROUP BY c.name
ORDER BY c.name;

SELECT billing_country AS country,
       COUNT(total) AS total_invoice
FROM invoice
GROUP BY billing_country
ORDER BY total_invoice DESC
LIMIT 5; 

SELECT country AS country,
       COUNT(customer_id) AS total_clients
FROM client
<<<<<<< HEAD
GROUP BY country;

SELECT *
FROM
  (SELECT billing_country AS country,
          COUNT(total) AS total_invoice
   FROM invoice
   GROUP BY billing_country
   ORDER BY total_invoice DESC
   LIMIT 5) AS i
LEFT OUTER JOIN
  (SELECT country AS country,
          COUNT(customer_id) AS total_clients
   FROM client
   GROUP BY country) AS c ON i.country = c.country;  
GROUP BY country; 

SELECT EXTRACT(MONTH FROM CAST(invoice_date AS date)) AS month_invoice,
       SUM(total) AS sum_of_total
FROM invoice
WHERE EXTRACT(YEAR FROM CAST(invoice_date AS date)) = 2010
GROUP BY month_invoice; 

SELECT EXTRACT(MONTH FROM CAST(invoice_date AS date)) AS month_invoice,
       SUM(unit_price*quantity) AS sum_of_price
FROM invoice AS i
LEFT JOIN invoice_line AS il ON i.invoice_id = il.invoice_id
WHERE EXTRACT(YEAR FROM CAST(invoice_date AS date)) = 2010
GROUP BY month_invoice; 

SELECT t_1.month_invoice,
       sum_of_total,
       sum_of_price
FROM
  (SELECT EXTRACT(MONTH FROM CAST(invoice_date AS date)) AS month_invoice,
          SUM(total) AS sum_of_total
   FROM invoice
   WHERE EXTRACT(YEAR
                 FROM CAST(invoice_date AS date)) = 2010
   GROUP BY month_invoice) AS t_1
JOIN
  (SELECT EXTRACT(MONTH FROM CAST(invoice_date AS date)) AS month_invoice,
          SUM(unit_price*quantity) AS sum_of_price
   FROM invoice AS i
   LEFT JOIN invoice_line AS il ON i.invoice_id = il.invoice_id
   WHERE EXTRACT(YEAR
                 FROM CAST(invoice_date AS date)) = 2010
   GROUP BY month_invoice) AS t_2 ON t_1.month_invoice = t_2.month_invoice; 

New SQL LEFT OUTER JOIN

SELECT m_11.invoice_month,
m_11.year_2011,
m_12.year_2012,
m_13.year_2013
FROM(SELECT EXTRACT(MONTH FROM inv.invoice_date::DATE) AS invoice_month,
                COUNT(inv.invoice_id) AS year_2011
                FROM invoice AS inv
                WHERE EXTRACT(YEAR FROM inv.invoice_date::DATE) = 2011
                GROUP BY invoice_month) AS m_11
LEFT OUTER JOIN(SELECT EXTRACT(MONTH FROM inv.invoice_date::DATE) AS invoice_month,
                COUNT(inv.invoice_id) AS year_2012
                FROM invoice AS inv
                WHERE EXTRACT(YEAR FROM inv.invoice_date::DATE) = 2012
                GROUP BY invoice_month) AS m_12
                ON m_11.invoice_month = m_12.invoice_month
LEFT OUTER JOIN(SELECT EXTRACT(MONTH FROM inv.invoice_date::DATE) AS invoice_month,
                COUNT(inv.invoice_id) AS year_2013
                FROM invoice AS inv
                WHERE EXTRACT(YEAR FROM inv.invoice_date::DATE) = 2013
                GROUP BY invoice_month) AS m_13
                ON m_12.invoice_month = m_13.invoice_month;

SELECT 
client.last_name
FROM client
WHERE client.customer_id IN (
 SELECT customer_id
 FROM invoice
 WHERE EXTRACT(YEAR FROM invoice_date::timestamp) = 2013
 GROUP BY customer_id
 HAVING COUNT(*) Filter (Where EXTRACT(MONTH FROM invoice_date::timestamp) = 1) >= 1
 And COUNT(*) Filter (Where EXTRACT(MONTH FROM invoice_date::timestamp) <> 1) >= 1
)

SELECT c.name AS name_category,
       COUNT(DISTINCT m.film_id) AS total_films
FROM movie AS m LEFT JOIN film_actor AS fa ON fa.film_id=m.film_id
LEFT JOIN actor AS a ON a.actor_id=fa.actor_id
LEFT JOIN film_category AS fc ON m.film_id=fc.film_id
LEFT JOIN category AS c ON c.category_id=fc.category_id
WHERE a.actor_id IN (SELECT a.actor_id
                     FROM movie AS m LEFT JOIN film_actor AS fa ON fa.film_id=m.film_id
                     LEFT JOIN actor AS a ON a.actor_id=fa.actor_id
                     WHERE m.release_year > 2013
                     GROUP BY a.actor_id
                     HAVING COUNT(a.actor_id)>7)
GROUP BY name
ORDER BY total_films DESC, name_category;



