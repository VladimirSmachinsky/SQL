Информационная схема базы данных
В прошлом уроке мы упоминали, что информация о ключах таблицы, как и данные о других ограничениях, хранится в специальной таблице с метаданными. На самом деле существует целая схема с информационными таблицами. Каждая таблица хранит в себе информацию о созданных в базе объектах. Она так и называется: information_schema (от англ. «информационная схема»). 
Представьте, что вы работаете с незнакомой базой данных. Если нет документации, как узнать, какие типы данных используются и какие ограничения у полей? Выручат информационные таблицы.
В схеме больше пятидесяти информационных таблиц, каждая из которых относится к определённому объекту или группе объектов. Например:
information_schema.tables хранит информацию обо всех таблицах;
information_schema.columns — обо всех полях всех таблиц;
information_schema.constraint_column_usage — об ограничениях полей.
Таким запросом можно вывести все таблицы в схеме mobile_app:
SELECT *
FROM information_schema.tables t 
WHERE table_schema = 'mobile_app'; 

Запрос ниже выведет все первичные ключи таблиц:
SELECT *
FROM information_schema.table_constraints tc
WHERE table_schema = 'mobile_app' 
          AND constraint_type = 'PRIMARY KEY'; 

С помощью информационной схемы можно проверить ограничения полей. Такой запрос покажет, на каких полях стоят ограничения в схеме mobile_app:
SELECT *
FROM information_schema.constraint_column_usage
WHERE table_schema = 'mobile_app'; 

Поле таблицы constraint_schema хранит название схемы, в которой содержится ограничение. 
Чтобы узнать, какие именно стоят ограничения, обратимся к таблице check_constraints:
SELECT constraint_schema, 
       constraint_name,
       check_clause
FROM information_schema.check_constraints cc2 
WHERE constraint_schema = 'mobile_app'; 

Изучите таблицы информационной схемы. Попробуйте найти информацию о типах данных полей и их точности.
SELECT data_type,
       character_octet_length,
       numeric_precision,
       numeric_precision_radix,
       numeric_scale,
       datetime_precision
FROM information_schema.columns 
WHERE table_schema = 'mobile_app'; 

Команда DROP. Удаление объектов.
Создать новый объект в базе теперь не составит труда, а как удалить лишнюю таблицу или схему? Для удаления объектов из базы используют команду DROP.
Синтаксис
Удалить объект можно так: 
DROP <типа объекта> <название объекта> <дополнительные параметры> 
DROP удалит поле, таблицу, схему или целую базу данных. Как и в случае с командой CREATE, при удалении объекта можно указать дополнительные параметры.
Чтобы удалить базу данных yandex, необходимо отправить такую команду:
DROP DATABASE yandex; 
Обратите внимание, что операцию отменить не получится — удалять объекты нужно осторожно.
Чтобы удалить таблицу, вместо DATABASE указывают другой тип объекта — TABLE. Если таблица принадлежит какой-либо схеме, нужно добавить и название схемы:
DROP TABLE practicum;
DROP TABLE yandex.parcticum; 
Ещё одна особенность — если попытаться удалить объект, которого нет в базе, возникнет ошибка. Существует ли такой объект, можно проверить с помощью IF EXISTS:
DROP TABLE users IF EXISTS; 

Режимы удаления объектов
У команд DROP TABLE и DROP SCHEMA есть два режима — RESTRICT и CASCADE. 
Режим RESTRICT используется по умолчанию: он запрещает удалять объект, если на него ссылаются другие объекты. Например, в режиме RESTRICT нельзя удалить таблицу, которая связана внешним ключом с другой таблицей. 
DROP TABLE practicum.users RESTRICT; 
В режиме CASCADE такую таблицу можно удалить, но вместе с этим удалится и связь с зависимой таблицей. Значения же в зависимой таблице останутся без изменений.
DROP TABLE practicum.users CASCADE; 
Если в схеме находится хотя бы одна таблица в режиме RESTRICT, такую схему удалить не получится. Понадобится режим CASCADE: с его помощью можно удалить схему и все вложенные таблицы.
DROP SCHEMA practicum CASCADE; 

Команда ALTER
Теперь вы знаете, как удалить таблицу, схему или целую базу. С полями сложнее: удалить поле с помощью одной команды DROP не получится. Понадобится ещё одна команда — ALTER. Команда ALTER позволяет сначала выбрать таблицу, а затем её изменить:
ALTER TABLE users
DROP COLUMN username; 

Команды ALTER, RENAME, SET
С командой ALTER вы познакомились в прошлом уроке. Она указывает на объекты, которые нужно изменить в базе данных. 
ALTER <тип объекта> <название объекта> <действие> 
В качестве типа объекта могут быть указаны:
DATABASE — база данных;
SCHEMA — схема;
TABLE — таблица;
COLUMN — поле.
ALTER — несамостоятельная команда. После неё обязательно нужно указать действие, которое хотят произвести над объектом. Действия задаются командами SET, RENAME или DROP, как в примере из прошлого урока. 

Команда SET
SET позволяет изменить какое-либо свойство объекта. Например, такой командой можно добавить таблицу в схему:
ALTER TABLE students
SET SCHEMA new_schema; 
Обратите внимание, что схема, в которую добавляют таблицу, уже должна быть в базе.
Синтаксис команды SET следующий:
SET <свойство объекта> <новое значение> 
В отличие от ALTER, команда SET — самостоятельная. Её можно использовать без указателя.
Чтобы изменить поле в таблице, команда SET не понадобится. В таком случае к указателю таблицы добавляют команду ALTER, которая указывает на поле. Команда ниже меняет тип данных поля course_id на текстовый:
ALTER TABLE courses
ALTER COLUMN course_id TYPE text; 

Команда RENAME
Команда RENAME позволяет менять названия объектов: баз данных, схем, таблиц и полей. Так, например, можно изменить название базы данных:
ALTER DATABASE practicum
RENAME TO yandex_practicum; 
Синтаксис команды RENAME следующий:
RENAME TO <новое название объекта> 
Чтобы переименовать базу данных или таблицу, исходное название можно не указывать — его и так пишут в ALTER. Но в случае, если переименовывают поле, после RENAME указывают старое название, а после TO — новое. 
Команда ниже изменит название поля username таблицы students на user_name:
ALTER TABLE students
RENAME username TO user_name; 
Важно: в рамках запроса можно выполнить только одно действие — SET или RENAME. Если их объединить в одном запросе, произойдёт ошибка:
ALTER TABLE users
ALTER COLUMN email TYPE varchar
RENAME TO customers; 
Выход — разбить запрос на два:
ALTER TABLE users
ALTER COLUMN email TYPE varchar;
ALTER TABLE users
RENAME TO customers; 

Измените тип данных поля area из таблицы flats — укажите тип numeric с точностью до одного знака после запятой.
ALTER TABLE mobile_app.flats
ALTER COLUMN area TYPE numeric(1);

Команда ADD
Команда ADD добавляет объекты и свойства к существующим объектам: 
ADD <тип объекта или свойства> <название объекта> <дополнительные параметры> 
С помощью ADD можно добавить поле в таблицу:
ALTER TABLE courses
ADD COLUMN course_type text; 
В команде можно сразу определить ограничения этого поля:
ALTER TABLE courses
ADD COLUMN course_type text CHECK(course_type IN ('free', 'paid')); 
Добавить ограничение к существующему полю тоже можно, добавив ключевое слово CONSTRAINT:
ALTER TABLE courses
ADD CONSTRAINT course_valuation CHECK(course_valuation IN (1, 2, 3)); 
Важно добавить название ограничения — course_valuation. Без названия добавить ограничение к существующему полю не получится.
Когда добавляют ограничения PRIMARY KEY, REFERENCES, NOT NULL и UNIQUE, то поле, к которому применяют ограничение, заключают в скобки:
ALTER TABLE courses
ADD CONSTRAINT pk_course_id PRIMARY KEY(course_id); 

В таблице mobile_app.users есть поле auth_type, которое указывает на то, каким способом пользователь авторизовался в приложении. Укажите для этого поля допустимые значения: 
'phone' — мобильный телефон;
'social' — социальные сети;
'email' — электронная почта.
Добавьте поле has_balcony в таблицу mobile_app.flats — значение в этом поле укажет, есть ли в квартире балкон. Укажите ограничение для поля: допустимые значения 'Y' и 'N'.
Ранее вы создали таблицу mobile_app.users, но не указывали, что user_id — это первичный ключ таблицы. Удалите свойство этого поля командой DROP с ключевым словом CONSTRAINT, а затем создайте новое и укажите, что это первичный ключ. Чтобы найти название ограничения, воспользуйтесь таблицей information_schema.columns_constraints. 
-- проверка поля auth_type
ALTER TABLE mobile_app.users
ADD CONSTRAINT auth_type CHECK(auth_type IN ('phone', 'social', 'email'));

-- новое поле has_balcony в таблице mobile_app.flats с ограничением
ALTER TABLE mobile_app.flats
ADD COLUMN has_balcony text CHECK(has_balcony IN ('Y', 'N'));

-- удаление существующего ограничения, название ограничения может отличаться
ALTER TABLE mobile_app.users
DROP CONSTRAINT unique_user_id;

-- добавление ограничения PRIMARY KEY с названием pk_user_id к полю user_id
ALTER TABLE mobile_app.users
ADD CONSTRAINT pk_user_id PRIMARY KEY (user_id); 
